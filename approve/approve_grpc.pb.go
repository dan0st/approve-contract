// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: approve.proto

package approve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApproveServiceClient is the client API for ApproveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApproveServiceClient interface {
	SaveLetter(ctx context.Context, in *SentLetter, opts ...grpc.CallOption) (*SentLetter, error)
	SaveResponse(ctx context.Context, in *RecipientResponse, opts ...grpc.CallOption) (*RecipientResponse, error)
}

type approveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApproveServiceClient(cc grpc.ClientConnInterface) ApproveServiceClient {
	return &approveServiceClient{cc}
}

func (c *approveServiceClient) SaveLetter(ctx context.Context, in *SentLetter, opts ...grpc.CallOption) (*SentLetter, error) {
	out := new(SentLetter)
	err := c.cc.Invoke(ctx, "/approve.ApproveService/SaveLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveServiceClient) SaveResponse(ctx context.Context, in *RecipientResponse, opts ...grpc.CallOption) (*RecipientResponse, error) {
	out := new(RecipientResponse)
	err := c.cc.Invoke(ctx, "/approve.ApproveService/SaveResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApproveServiceServer is the server API for ApproveService service.
// All implementations must embed UnimplementedApproveServiceServer
// for forward compatibility
type ApproveServiceServer interface {
	SaveLetter(context.Context, *SentLetter) (*SentLetter, error)
	SaveResponse(context.Context, *RecipientResponse) (*RecipientResponse, error)
	mustEmbedUnimplementedApproveServiceServer()
}

// UnimplementedApproveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApproveServiceServer struct {
}

func (UnimplementedApproveServiceServer) SaveLetter(context.Context, *SentLetter) (*SentLetter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLetter not implemented")
}
func (UnimplementedApproveServiceServer) SaveResponse(context.Context, *RecipientResponse) (*RecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResponse not implemented")
}
func (UnimplementedApproveServiceServer) mustEmbedUnimplementedApproveServiceServer() {}

// UnsafeApproveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApproveServiceServer will
// result in compilation errors.
type UnsafeApproveServiceServer interface {
	mustEmbedUnimplementedApproveServiceServer()
}

func RegisterApproveServiceServer(s grpc.ServiceRegistrar, srv ApproveServiceServer) {
	s.RegisterService(&ApproveService_ServiceDesc, srv)
}

func _ApproveService_SaveLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentLetter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServiceServer).SaveLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.ApproveService/SaveLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServiceServer).SaveLetter(ctx, req.(*SentLetter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApproveService_SaveResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipientResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServiceServer).SaveResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.ApproveService/SaveResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServiceServer).SaveResponse(ctx, req.(*RecipientResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// ApproveService_ServiceDesc is the grpc.ServiceDesc for ApproveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApproveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "approve.ApproveService",
	HandlerType: (*ApproveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLetter",
			Handler:    _ApproveService_SaveLetter_Handler,
		},
		{
			MethodName: "SaveResponse",
			Handler:    _ApproveService_SaveResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approve.proto",
}
